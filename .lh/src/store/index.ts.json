{
    "sourceFile": "src/store/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1677747249044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1677747266471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,65 +1,61 @@\n const delay = (t: number) => new Promise((r) => setTimeout(r, t))\r\n \r\n-export type Theme = 'outline' | 'filled' | 'two-tone' | 'multi-color';\r\n-export interface IconSpaceProps{\r\n-  strokeWidth: number\r\n-  size: number\r\n-  theme: Theme\r\n-  colors: string | string[]\r\n-  strokeLinejoin: string\r\n-  strokeLinecap: string\r\n+export type Theme = 'outline' | 'filled' | 'two-tone' | 'multi-color'\r\n+export interface IconSpaceProps {\r\n+\tstrokeWidth: number\r\n+\tsize: number\r\n+\ttheme: Theme\r\n+\tcolors: string | string[]\r\n+\tstrokeLinejoin: string\r\n+\tstrokeLinecap: string\r\n }\r\n \r\n export const useCounter = defineStore('counter', {\r\n-  state: ():{\r\n+\tstate: (): IconSpaceProps => ({\r\n+\t\tstrokeWidth: 2,\r\n+\t\tsize: 24,\r\n+\t\ttheme: 'multi-color',\r\n+\t\tcolors: ['#666', '#2F88FF', '#FFF', '#43CCF8'],\r\n+\t\tstrokeLinejoin: 'miter',\r\n+\t\tstrokeLinecap: 'square'\r\n+\t}),\r\n \r\n-  } => ({\r\n-    iconConfig: {\r\n-      strokeWidth: 2,\r\n-      size: 24,\r\n-      theme: 'multi-color',\r\n-      colors: ['#666', '#2F88FF', '#FFF', '#43CCF8'],\r\n-      strokeLinejoin: 'miter',\r\n-      strokeLinecap: 'square'\r\n-    }\r\n-  }),\r\n+\tactions: {\r\n+\t\tincrement(amount = 1) {\r\n+\t\t\tthis.incrementedTimes++\r\n+\t\t\tthis.n += amount\r\n+\t\t},\r\n \r\n-  actions: {\r\n-    increment(amount = 1) {\r\n-      this.incrementedTimes++\r\n-      this.n += amount\r\n-    },\r\n+\t\tchangeMe() {\r\n+\t\t\tconsole.log('change me to test HMR')\r\n+\t\t},\r\n \r\n-    changeMe() {\r\n-      console.log('change me to test HMR')\r\n-    },\r\n+\t\tasync fail() {\r\n+\t\t\tconst n = this.n\r\n+\t\t\tawait delay(1000)\r\n+\t\t\tthis.numbers.push(n)\r\n+\t\t\tawait delay(1000)\r\n+\t\t\tif (this.n !== n) {\r\n+\t\t\t\tthrow new Error('Someone changed n!')\r\n+\t\t\t}\r\n \r\n-    async fail() {\r\n-      const n = this.n\r\n-      await delay(1000)\r\n-      this.numbers.push(n)\r\n-      await delay(1000)\r\n-      if (this.n !== n) {\r\n-        throw new Error('Someone changed n!')\r\n-      }\r\n+\t\t\treturn n\r\n+\t\t},\r\n \r\n-      return n\r\n-    },\r\n+\t\tasync decrementToZero(interval: number = 300) {\r\n+\t\t\tif (this.n <= 0) return\r\n \r\n-    async decrementToZero(interval: number = 300) {\r\n-      if (this.n <= 0) return\r\n-\r\n-      while (this.n > 0) {\r\n-        this.$patch((state) => {\r\n-          state.n--\r\n-          state.decrementedTimes++\r\n-        })\r\n-        await delay(interval)\r\n-      }\r\n-    },\r\n-  },\r\n+\t\t\twhile (this.n > 0) {\r\n+\t\t\t\tthis.$patch((state) => {\r\n+\t\t\t\t\tstate.n--\r\n+\t\t\t\t\tstate.decrementedTimes++\r\n+\t\t\t\t})\r\n+\t\t\t\tawait delay(interval)\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n })\r\n \r\n if (import.meta.hot) {\r\n-  import.meta.hot.accept(acceptHMRUpdate(useCounter, import.meta.hot))\r\n+\timport.meta.hot.accept(acceptHMRUpdate(useCounter, import.meta.hot))\r\n }\r\n"
                },
                {
                    "date": 1677747280527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,42 +19,9 @@\n \t\tstrokeLinejoin: 'miter',\r\n \t\tstrokeLinecap: 'square'\r\n \t}),\r\n \r\n-\tactions: {\r\n-\t\tincrement(amount = 1) {\r\n-\t\t\tthis.incrementedTimes++\r\n-\t\t\tthis.n += amount\r\n-\t\t},\r\n-\r\n-\t\tchangeMe() {\r\n-\t\t\tconsole.log('change me to test HMR')\r\n-\t\t},\r\n-\r\n-\t\tasync fail() {\r\n-\t\t\tconst n = this.n\r\n-\t\t\tawait delay(1000)\r\n-\t\t\tthis.numbers.push(n)\r\n-\t\t\tawait delay(1000)\r\n-\t\t\tif (this.n !== n) {\r\n-\t\t\t\tthrow new Error('Someone changed n!')\r\n-\t\t\t}\r\n-\r\n-\t\t\treturn n\r\n-\t\t},\r\n-\r\n-\t\tasync decrementToZero(interval: number = 300) {\r\n-\t\t\tif (this.n <= 0) return\r\n-\r\n-\t\t\twhile (this.n > 0) {\r\n-\t\t\t\tthis.$patch((state) => {\r\n-\t\t\t\t\tstate.n--\r\n-\t\t\t\t\tstate.decrementedTimes++\r\n-\t\t\t\t})\r\n-\t\t\t\tawait delay(interval)\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n+\tactions: {}\r\n })\r\n \r\n if (import.meta.hot) {\r\n \timport.meta.hot.accept(acceptHMRUpdate(useCounter, import.meta.hot))\r\n"
                },
                {
                    "date": 1677747311196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-const delay = (t: number) => new Promise((r) => setTimeout(r, t))\r\n-\r\n export type Theme = 'outline' | 'filled' | 'two-tone' | 'multi-color'\r\n export interface IconSpaceProps {\r\n \tstrokeWidth: number\r\n \tsize: number\r\n@@ -9,9 +7,9 @@\n \tstrokeLinejoin: string\r\n \tstrokeLinecap: string\r\n }\r\n \r\n-export const useCounter = defineStore('counter', {\r\n+export const useSvgStore = defineStore('counter', {\r\n \tstate: (): IconSpaceProps => ({\r\n \t\tstrokeWidth: 2,\r\n \t\tsize: 24,\r\n \t\ttheme: 'multi-color',\r\n@@ -23,6 +21,6 @@\n \tactions: {}\r\n })\r\n \r\n if (import.meta.hot) {\r\n-\timport.meta.hot.accept(acceptHMRUpdate(useCounter, import.meta.hot))\r\n+\timport.meta.hot.accept(acceptHMRUpdate(useSvgStore, import.meta.hot))\r\n }\r\n"
                }
            ],
            "date": 1677747249044,
            "name": "Commit-0",
            "content": "const delay = (t: number) => new Promise((r) => setTimeout(r, t))\r\n\r\nexport type Theme = 'outline' | 'filled' | 'two-tone' | 'multi-color';\r\nexport interface IconSpaceProps{\r\n  strokeWidth: number\r\n  size: number\r\n  theme: Theme\r\n  colors: string | string[]\r\n  strokeLinejoin: string\r\n  strokeLinecap: string\r\n}\r\n\r\nexport const useCounter = defineStore('counter', {\r\n  state: ():{\r\n\r\n  } => ({\r\n    iconConfig: {\r\n      strokeWidth: 2,\r\n      size: 24,\r\n      theme: 'multi-color',\r\n      colors: ['#666', '#2F88FF', '#FFF', '#43CCF8'],\r\n      strokeLinejoin: 'miter',\r\n      strokeLinecap: 'square'\r\n    }\r\n  }),\r\n\r\n  actions: {\r\n    increment(amount = 1) {\r\n      this.incrementedTimes++\r\n      this.n += amount\r\n    },\r\n\r\n    changeMe() {\r\n      console.log('change me to test HMR')\r\n    },\r\n\r\n    async fail() {\r\n      const n = this.n\r\n      await delay(1000)\r\n      this.numbers.push(n)\r\n      await delay(1000)\r\n      if (this.n !== n) {\r\n        throw new Error('Someone changed n!')\r\n      }\r\n\r\n      return n\r\n    },\r\n\r\n    async decrementToZero(interval: number = 300) {\r\n      if (this.n <= 0) return\r\n\r\n      while (this.n > 0) {\r\n        this.$patch((state) => {\r\n          state.n--\r\n          state.decrementedTimes++\r\n        })\r\n        await delay(interval)\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nif (import.meta.hot) {\r\n  import.meta.hot.accept(acceptHMRUpdate(useCounter, import.meta.hot))\r\n}\r\n"
        }
    ]
}